<?php

/**
 * @file
 * Module, Permissions, block
 */

// Requeridos
require_once __DIR__ . '/includes/moxy.php';
require_once __DIR__ . '/includes/data_access.inc';

// Archivos incluidos
module_load_include('inc', 'mobbexsubscription', 'includes/set_config.inc');
module_load_include('inc', 'mobbexsubscription', 'includes/webhook.inc');
module_load_include('inc', 'mobbexsubscription', 'includes/create_subscription.inc');
module_load_include('inc', 'mobbexsubscription', 'includes/executions.inc');



/**
 * @method implementa hook_init e inicializa el modulo
 */
function mobbexsubscription_init()
{
}
/**
 * Implements hook_permission
 */
function mobbexsubscription_permission()
{
  return [
    'active_subscriptor' =>  array(
      'title' => t('Mobbex Subscription - Rol para usuario con suscripció activa'),
      'description' => t('Permisos para acciones de suscriptores .'),
    ),
    'acceso_configurar_mobbexsubscription' =>  array(
      'title' => t('Mobbex Subscription - Configuracion'),
      'description' => t('Permisos para acceder a configuraciones de Mobbex Subscription .'),
    ),

    'acceso_create_subscription_mobbexsubscription' =>  array(
      'title' => t('Mobbex Subscription - Crear Suscripción'),
      'description' => t('Permisos para acceder a Crear Suscripción .'),
    ),

    'acceso_webhook_mobbexsubscription' =>  array(
      'title' => t('Mobbex Subscription - Webhook'),
      'description' => t('Permisos para acceder a Webhook .'),
    ),

    'acceso_executions_mobbexsubscription' =>  array(
      'title' => t('Mobbex Subscription - Ejecuciones'),
      'description' => t('Permisos para acceder a Ejecuciones .'),
    ),

    'acceso_suscribirme_mobbexsubscription' =>  array(
      'title' => t('Mobbex Subscription - Acceso a formulario Suscribirme'),
      'description' => t('Permisos para acceder  a formulario Suscribirme .'),
    )
  ];
}
//test_mobbexsubscription

/**
 * @method implementa hook_help y muestra la ayuda de configuración y uso del modulo
 */
function mobbexsubscription_help($path, $arg)
{
  switch ($path) {
    case 'mobbexsubscription/manage':
      // Help text for the simple page registered for this path.
      return t('This section displays the list of Pages.');
  }
}

/**
 * @method implementa hook_menu y define los items de menu del modulo
 */

function mobbexsubscription_menu()
{
  $items = array();

  /*------ ITEMS DE MENU PARA MODULO -------*/
  $items['admin/config/mobbexsubscription/configurar'] = [
    'title' => 'Configuración',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mobbexsubscription_config_form'),
    'access arguments' => array('acceso_configurar_mobbexsubscription'),
    'file' => 'includes/set_config.inc',
    'expanded' => TRUE,
  ];
  $items['admin/config/mobbexsubscription/nueva-suscripcion'] = [
    'title' => 'Crear Suscripción',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_subscription_form'),
    'access arguments' => array('acceso_create_subscription_mobbexsubscription'),
    'file' => 'includes/create_subscription.inc',
    'expanded' => TRUE,
  ];

  $items['admin/config/mobbexsubscription/ejecuciones'] = [
    'title' => 'Ejecuciones',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('executions_form'),
    'access arguments' => array('acceso_executions_mobbexsubscription'),
    'file' => 'includes/executions.inc',
    'expanded' => TRUE,
  ];
  $items['mobbex/webhook'] = [
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webhook_form'),
    'file' => 'includes/webhook.inc',
    'access arguments' => array('acceso_webhook_mobbexsubscription'),
    'expanded' => TRUE,
  ];
  $items['suscribirme'] = [
    'title' => t('Suscribirme'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('createNewSuscriptor_form'),
    'access arguments' => array('acceso_suscribirme_mobbexsubscription'),
    'expanded' => TRUE,
  ];

  $items['admin/config/mobbexsubscription'] = [
    'title'            => 'Mobbex Subscriptions',
    'description'      => 'Seccion',
    'page callback'    => 'mobbexsubscription_config_form',
    'access arguments' => ['acceso_configurar_mobbexsubscription'],
  ];
  return $items;
}

/**
 *  Implements hook_block_info()
 */
function mobbexsubscription_block_info()
{

  $blocks['boton_de_suscripcion'] = [
    // este bloque tiene diferentes formas de verse segun los roles de usuario
    // Si el usuario es anonimo ve los botones [Suscribirse] [Iniciar]
    // si esta logueado pero no es susciptor   [Suscribirse] [Salir]
    // si es suscriptor dolo [salir]
    'info' => t('Mobbex Subscription: Botón Suscribirme con botón de Iniciar'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  ];

  $blocks['mi_suscripcion'] = [
    // info: The name of the block.
    'info' => t('Mobbex Subscription: Info sobre mi suscripción'),
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'user/*',
    'cache' => DRUPAL_CACHE_PER_ROLE,
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mobbexsubscription_block_view($delta = '')
{
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'boton_de_suscripcion':
      $block['subject'] = t('');
      $user = $GLOBALS['user'];
      if (!empty($user->picture)) {
        $file =  file_load($user->picture);
        //$picture = image_style_url("thumbnail", $file->uri);
        $picture = theme('image_style', ['style_name' => 'thumbnail', 'path' => $file->uri, 'width' => '20']);
      }

      $render = [];
      $render[] = '<div class="navbar-right analisis-user-nav">';

      //tres casos posibles
      if (array_search('anonymous user', $user->roles)) {
        $render[] = l(
          'suscribirse',
          'user/login',
          [
            'attributes' => [
              'class' => ['btn-suscribirme', 'btn', 'btn-success'],
              'html' => TRUE,
              'style' => 'margin: 5px;'
            ],
            'query' => ['from' => 'subscribe']
          ]
        );
        $render[] = l(
          'Iniciar',
          'user/login',
          [
            'attributes' => [
              'class' => ['btn-login', 'btn', 'btn-default'],
              'html' => TRUE,
              'style' => 'margin: 5px;'
            ]
          ]
        );
      }
      if (array_search('authenticated user', $user->roles) && !array_search('active_subscriptor', $user->roles)) {
        $render[] = '<div class="dropdown">';
        $render[] = '<button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">';
        if (!empty($user->picture)) {
          $render[] =  '<div class="user-picture-custom">' . $picture . '</div>';
        }
        $render[] =  '<div style="vertical-align:middle; display:inline;">' . $user->name . '</div>';

        $render[] = '<span class="caret"></span>';
        $render[] = '</button>';
        $render[] = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu1">';
        $render[] = '<li><a href="suscribirme">SUSCRIBIRME</a></li>';
        $render[] = '<li><a href="user">MI CUENTA</a></li>';
        $render[] = '<li><a href="#">AYUDA</a></li>';
        $render[] = '<li><a href="#">TERMINOS Y CONDICIONES</a></li>';
        $render[] = '<li><a href="user/logout">SALIR</a></li>';
        $render[] = '</ul></div>';
      }

      if (array_search('active_subscriptor', $user->roles)) {

        $render[] = '<div class="dropdown">';
        $render[] = '<button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">';
        if (!empty($user->picture)) {
          $render[] =  '<div class="user-picture-custom">' . $picture . '</div>';
        }

        $render[] =  '<div style="vertical-align:middle; display:inline;">' . $user->name . '</div>';
        $render[] = '<span class="caret"></span>';
        $render[] = '</button>';
        $render[] = '<ul class="dropdown-menu" aria-labelledby="dropdownMenu1">';
        $render[] = '<li><a href="user/' . $user->uid . '/#edit-subscription">SUSCRIPCIÓN</a></li>';
        $render[] = '<li><a href="user">MI CUENTA</a></li>';
        $render[] = '<li><a href="#">AYUDA</a></li>';
        $render[] = '<li><a href="#">TERMINOS Y CONDICIONES</a></li>';
        $render[] = '<li><a href="user/logout">SALIR</a></li>';
        $render[] = '</ul></div>';
      }

      $render[] = '</div>';
      $block['content']['#markup'] = implode($render);
      $block['content']['#attached']['css'] = [
        drupal_get_path('module', 'mobbexsubscription') . '/css/mobbexsubscription.css',
      ];


      break;

    case 'mi_suscripcion':
      $block['subject'] = '';
      $block['content'] = drupal_get_form('subscriber_info_form');
      break;
  }
  return $block;
}

/**
 * Implements hook_form().
 *    Formulario auxiliar para la prueba de la suscripcion de un usuario
 */
function createNewSuscriptor_form($form,  &$form_state)
{

  $form['dni'] = [
    '#type'        => 'textfield',
    '#title'       => t('DNI'),
    '#description' => t('DNI'),
    '#required'    => TRUE,
  ];
  $form['nombre'] = [
    '#type'        => 'textfield',
    '#title'       => t('Nombre'),
    '#description' => t('nombre'),
    '#required'    => TRUE,
  ];
  $form['correo'] = [
    '#type'        => 'textfield',
    '#title'       => t('correo'),
    '#description' => t('correo'),
    '#required'    => TRUE,
  ];
  $form['confirm'] = [
    '#type'     => 'submit',
    '#name'     => 'confirmNewSubscription',
    '#value'    => t('Suscribirme'),
    '#validate' => ['createNewSuscriptor_validate'],
    '#submit'   => ['createNewSuscriptor_submit'],
  ];

  return $form;
}
function createNewSuscriptor_validate($form,  &$form_state)
{
}
function createNewSuscriptor_submit($form,  &$form_state)
{

  $uid = $GLOBALS['user']->uid;
  $isSubscribed = mobbexsubscription_entry_get($uid);

  if (is_object($isSubscribed)) {
    return;
    // el usuario ya se registro, no importa si la suscripcion eta inactiva
  }

  $apikey       = variable_get('mobbexsubscription_apikey', 0);
  $token        = variable_get('mobbexsubscription_token', 0);
  $subscription = variable_get('mobbexsubscription_idsubs', 0);

  if (!$apikey || !$token) return;

  $data = [
    'customer' => [
      'identification'   => $form_state['values']['dni'],
      'email'            => $form_state['values']['correo'],
      'name'             => $form_state['values']['nombre'],
      'id_drupal' => $uid //se permiten campos customs para customer
    ],
    'test'      => 'true', //important!! para poder usar tarjetas de prueba
    'startDate' => [  //la suscripcion empieza hoy mismo
      'day' => date('j'),
      'month' => date('n'),
    ],
    'reference' => str_pad(strval($uid), 8, '0', STR_PAD_LEFT), //el uid de drupal completado con ceros a la izq
  ];

  $mbx = new Moxy($apikey, $token);
  $response = $mbx->setSubscriber($subscription, $data);
  if ($response['result'] == 'true') {
    $fields = [
      'uid'            => $uid,
      'subscription_id' => $response['data']['subscription']['uid'],
      'subscriber_id'  => $response['data']['uid'],
      'status'         => 0,
    ];
    mobbexsubscription_entry_insert($fields);
    //Redireccionamos al usuario a mobbex para que ingrese un medio de pago
    drupal_goto($response['data']['sourceUrl']);
  }
}

/**
 * Cambia el rol al usuario actual.
 * @param bool $isActive
 *    Estado al que pasara el usuario actual representado por un rol
 */

function activeSubscriptionRole($uid, $state)
{

  $user = user_load($uid);
  $role = user_role_load_by_name('active_subscriptor');
  if (empty($role)) return 0; //no existe el rol en el sistema 

  if ($state) {
    //agregamos el rol al array de roles del usuario
    $new_roles = $user->roles + array($role->rid => $role->name);
  } else {
    //creamos un nuevo array de roles para el usuario sin el rol 'active_subscriptor'
    $new_roles = [];
    foreach ($user->roles as $id => $name) {
      if ($id != $role->rid)
        $new_roles[$id] = $name;
    }
  }
  user_save($user, ['roles' => $new_roles]);
  return 1;
}


/**
 * @file 
 * Info suscripción por usuario
 * 
 * Implements hook_form()
 * 
 *      Informacion de suscripción por usuarios
 * 
 */

function subscriber_info_form($form, &$form_state)
{
  if (isset($_GET["status"]) && isset($_GET["sid"])) {
    //Recibir estos parametros significa que mobbex nos redireccionó.
    // Si status es 200 el usuario ingresó correctamente un medio de pago.
    $welcome = $_GET["sid"];
  }
  $apikey            = variable_get('mobbexsubscription_apikey', 0);
  $token             = variable_get('mobbexsubscription_token', 0);
  if (empty($apikey) || empty($token)) {
    $errMessage = t('El modulo de suscripciones no fue configurado.');
    watchdog('mobbexsubscription', $errMessage, [], WATCHDOG_ALERT);
    return;
  }
  $idSubscription    = variable_get('mobbexsubscription_idsubs', 0);
  $user              = $GLOBALS['user'];
  $sub               = mobbexsubscription_entry_get($user->uid);
  $roleActSub        = user_role_load_by_name('active_subscriptor');
  $userHasActRole    = user_has_role($roleActSub->rid, $user);


  if (empty($sub) || is_array($sub)) {
    //El usuario nunca envio el formulario de suscripción.
    $sitename = variable_get('site_name', 'este sitio');
    $form['Message'] = [
      '#markup' => t('Usted no esta suscipto a :site, puede suscribirse completando el siguiente formulario, y así obtener todos los beneficios de un usuario premium.', [':site' => $sitename])
    ];

    //Incluimos el formulario de suscripción dentro de este formulario
    $form['subform'] = drupal_get_form('createNewSuscriptor_form');

    return $form;
  } elseif ($idSubscription !== $sub->subscription_id) {

    $errMessage =  'Hay una discrepancia con la subscripción seteada en la 
      configuracion del modulo (:idSubConf) y la suscripción a la cual 
      pertenece este usuario (:idSubUser).';

    watchdog(
      'mobbexsubscription',
      $errMessage,
      [':idSubConf' => $idSubscription, ':idSubUser' =>  $sub->subscription_id],
      WATCHDOG_ALERT
    );
    return;
  }

  $mbx = new Moxy($apikey, $token);
  $subData = $mbx->getSubscriber($sub->subscription_id, $sub->subscriber_id);

  if (!$userHasActRole) {
    //el usuario realizo la suscripcion pero no tiene un medio de pago activo.
    $link = l(
      'aquí',
      $subData['data']['url']
    );
    $form['Message'] = [
      '#markup' => 'Debe agregar un medio de pago en ' . $link . ', Su suscripción será activada cuando se ingrese un medio de pago valido.'
    ];
    return $form;
  }


  $form['subscription'] = [
    '#type' => 'fieldset',
    '#title' => t('Suscripción'),
    '#description' => t('Informacion sobre la suscripción a la que estas aderido.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  ];
  $form['subscriber'] = [
    '#type' => 'fieldset',
    '#title' => t('Mis datos'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];

  $preRender = [];
  $preRender['Nombre'] = $subData['data']['subscription']['name'];
  $preRender['Descripción'] = $subData['data']['subscription']['description'];
  $preRender['Monto'] = $subData['data']['subscription']['currency'] . ' ' . $subData['data']['subscription']['total'];
  $preRender['Intervalo de Cobro'] = $subData['data']['subscription']['interval'];

  $form['subscription']['text'] = [
    '#markup' => renderAsList($preRender),
  ];

  unset($preRender);
  $preRender['Mi Cuenta'] = l('Gestionar', $subData['data']['url']);
  if (empty($subData['data']['subscriber']['activeSource'])) {
    $preRender['Mi medio de pago'] = 'Aún no ingresó un medio de pago. ' . l('Ingresar', $subData['data']['url'] . '/source');
  } else {
    $preRender['Mi medio de pago'] = $subData['data']['subscriber']['activeSource']['name'] . l('Cambiar', $subData['data']['url'] . '/source');
  }
  $preRender['Mi número de referencia'] = $subData['data']['subscriber']['reference'];
  $preRender['Mi nombre'] = $subData['data']['subscriber']['customerData']['name'];
  $preRender['Mi identification'] = 'DNI ' . $subData['data']['subscriber']['customerData']['identification'];
  $preRender['Mi email'] = $subData['data']['subscriber']['customerData']['email'];
  $execution = $subData['data']['subscriber']['executions'][0];
  if ($execution['status'] ==  'pending') {

    //drupal_set_message($subData['data']['subscriber']['executions'][0]['status']);
    $execution = $subData['data']['subscriber']['executions'][0];

    $preRender['Pagos pendientes'] = 'Periodo ' . $execution['period'];
    $preRender['Pagos pendientes'] .= ' pendiente de pago, desde ' . $execution['day'];
    $preRender['Pagos pendientes'] .= '/' . $execution['month'];
    $preRender['Pagos pendientes'] .= '/' . $execution['year'];

    //' pendiente de pago, desde ' . $execution['day'] . '/' . $execution['month']  . '/' . $execution['year'];
  }

  $form['subscriber']['text'] = [
    '#markup' => renderAsList($preRender),
  ];

  return $form;
}

/** 
 * Genera html
 * @param mixed $arr 
 *    Array clave valor para formar una lista html
 */
function renderAsList($arr)
{
  $render = '<div>';
  foreach ($arr as $key => &$val) {
    $render .= '<p><strong>' . $key . ':</strong> ' . $val . '</p>';
  }
  return $render . '</div>';
}


/**
 * Implements hook_user_login().
 * 
 * Se usa para redireccionar usuario luego del login.
 */
function mobbexsubscription_user_login(&$edit, $account)
{
  // No vamos a redireccionar si es un cambio de contraseña
  $current_menu_item = menu_get_item();
  if ($current_menu_item['path'] == 'user/reset/%/%/%') {
    return;
  }

  // Si el usuario se logueo desde el registro, lo redireccionamos a /suscribirme, siempre.
  if ($current_menu_item['path'] == 'user/register') {
    $_GET['destination'] = 'suscribirme';
    return;
  }

  // seteamos la redireccion a /user como caso normal
  $_GET['destination'] = 'user';
  // buscamos si tiene la url tiene un parametro 'from'
  $from = (isset($_GET['from'])) ? $_GET['from'] : FALSE;

  // Si llegamos desde el link "suscribirme" redireccionamos a /suscribirme
  // si el usuario logueado ya tiene el rol 'active_subscriptor' se va a /user
  if (($from === 'suscribe') && (!array_search('active_subscriptor', $account->roles))) {
    $_GET['destination'] = 'suscribirme';
  }
}
